grammar;

use super::ast::{ASTNode, Operation, AssignmentProp};

pub Ident: ASTNode = r"[a-zA-Z_][a-zA-Z0-9_]*" => ASTNode::Identifier(<>.to_string());

pub Num: ASTNode = r"[0-9]+(\.[0-9]+)?" => ASTNode::NumericLiteral(str::parse::<f64>(<>).unwrap());

pub Expr: ASTNode = Assignment;

pub AddExpr: ASTNode = {
    <l: AddExpr> "+" <r: MulExpr> => ASTNode::BinaryExpression {
        left: Box::new(l),
        right: Box::new(r),
        operation: Operation::Add
    },
    <l: AddExpr> "-" <r: MulExpr> => ASTNode::BinaryExpression {
        left: Box::new(l),
        right: Box::new(r),
        operation: Operation::Sub
    },
    MulExpr
};

pub MulExpr: ASTNode = {
    <l: MulExpr> "*" <r: Factor> => ASTNode::BinaryExpression {
        left: Box::new(l),
        right: Box::new(r),
        operation: Operation::Mul
    },
    <l: MulExpr> "/" <r: Factor> => ASTNode::BinaryExpression {
        left: Box::new(l),
        right: Box::new(r),
        operation: Operation::Div
    },
    Factor
};

pub Factor: ASTNode = {
    Num,
    "(" <Expr> ")"
};

pub Assignment: ASTNode = {
    <l: AssignmentProp> "=" <r: AddExpr> => ASTNode::BinaryExpression {
        left: Box::new(l),
        right: Box::new(r),
        operation: Operation::Assign
    },
    AddExpr
}

pub AssignmentProp: ASTNode = {
    <i: Ident> => ASTNode::AssignmentProp(
        AssignmentProp::Identifier(i.try_string().unwrap())
    )
};